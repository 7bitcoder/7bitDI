name: MainCI

on:
  push:
    branches: [ "dev" ]
    paths-ignore:
      - "Docs/**"
      - ".readthedocs.yaml"
      - "README.md"

  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - "Docs/**"
      - ".readthedocs.yaml"
      - "README.md"

env:
  BUILD_TYPE: Release
  BUILD_DIR: ${{github.workspace}}/build
  CMAKE_CONFIG_ARGS: -D_7BIT_DI_BUILD_TESTS:BOOL=ON -D_7BIT_DI_BUILD_EXAMPLES:BOOL=ON

jobs:
    test-gcc:
      strategy:
        matrix:
          version: [ 9, 10, 11, 12, 13 ]
          os: [ ubuntu-22.04, macos-12 ]

      runs-on: ${{ matrix.os }}

      steps:
        - uses: actions/checkout@v3

        - name: Install GCC
          uses: ./.github/actions/setup-gcc
          with:
            version: ${{ matrix.version }}

        - name: CMake Build
          uses: ./.github/actions/cmake-build

        - name: Test
          working-directory: ${{ env.BUILD_DIR }}
          run: ctest -C ${{ env.BUILD_TYPE }}

    test-gcc-old-os:
      strategy:
        matrix:
          version: [ 7, 8, 9, 10, 11 ]
          os: [ ubuntu-20.04, macos-11 ]

      runs-on: ${{ matrix.os }}

      steps:
        - uses: actions/checkout@v3

        - name: Install GCC
          uses: ./.github/actions/setup-gcc
          with:
            version: ${{ matrix.version }}

        - name: CMake Build
          uses: ./.github/actions/cmake-build

        - name: Test
          working-directory: ${{ env.BUILD_DIR }}
          run: ctest -C ${{ env.BUILD_TYPE }}


  #  test-mingw-windows:
  #    strategy:
  #      matrix:
  #        version: [ 10.3.0, 11.2.0, 12.2.0, 13.2.0 ]
  #        os: [ windows-2019, windows-2022 ]
  #
  #    runs-on: ${{ matrix.os }}
  #
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: Install MinGw
  #        uses: ./.github/actions/setup-mingw
  #        with:
  #          version: ${{ matrix.version }}
  #
  #      - name: Install Conan Packages
  #        uses: ./.github/actions/conan-install
  #        with:
  #          install-dir: ${{ env.BUILD_DIR }}
  #
  #      - name: CMake Build
  #        uses: ./.github/actions/cmake-build
  #
  #      - name: Test
  #        run: ctest -j 10 --preset conan-release

  #  test-clang-ubuntu:
  #    strategy:
  #      matrix:
  #        version: [ 11, 12, 13, 14, 15 ]
  #
  #    runs-on: ubuntu-22.04
  #
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: Install Clang
  #        uses: ./.github/actions/setup-clang
  #        with:
  #          version: ${{ matrix.version }}
  #
  #      - name: Install Conan Packages
  #        uses: ./.github/actions/conan-install
  #        with:
  #          install-dir: ${{ env.BUILD_DIR }}
  #
  #      - name: CMake Build
  #        uses: ./.github/actions/cmake-build
  #
  #      - name: Test
  #        run: ctest -j 10 --preset conan-release

  #  test-clang-old-ubuntu:
  #    strategy:
  #      matrix:
  #        version: [ 7, 8, 9, 10, 11, 12 ]
  #        os: [ ubuntu-20.04 ]
  #
  #    runs-on: ubuntu-20.04
  #
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: Install Clang
  #        uses: ./.github/actions/setup-clang
  #        with:
  #          version: ${{ matrix.version }}
  #
  #      - name: Install Conan Packages
  #        uses: ./.github/actions/conan-install
  #        with:
  #          install-dir: ${{ env.BUILD_DIR }}
  #
  #      - name: CMake Build
  #        uses: ./.github/actions/cmake-build
  #
  #      - name: Test
  #        run: ctest -j 10 --preset conan-release


#  test-clang-windows:
#    strategy:
#      fail-fast: false
#      matrix:
#        version: [ 8.0.1, 9.0.1, 11.1.0, 12.0.1, 13.0.1, 14.0.6, 15.0.7, 16.0.6, 17.0.6]
#        os: [ windows-2019, windows-2022 ]
#
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Install Clang
#        uses: ./.github/actions/setup-clang
#        with:
#          version: ${{ matrix.version }}
#
#      - name: CMake Build
#        uses: ./.github/actions/cmake-build
#
#      - name: Test
#        working-directory: ${{ env.BUILD_DIR }}
#        run: ctest -C ${{ env.BUILD_TYPE }}
